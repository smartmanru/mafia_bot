
from re import M
from aiogram import types
from aiogram.dispatcher import FSMContext, storage
from aiogram.types import Message ,ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton
from loguru import logger
from loader import bot
# from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.callback_data import CallbackData
import logging
import random
import uuid
import typing


from aiogram.dispatcher.filters.state import State, StatesGroup

class User(StatesGroup):
    page= State()
    fio = State()
    city= State()
    age= State()
    mf_nn= State()
    proof= State()
    dohod= State()
    ph_num= State()

var_games= CallbackData('id','data','action')

async def cancel_handler(msg:Message,state:FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logger.info('Cancelling state %r', current_state)
    await state.finish()
    # And remove keyboard (just in case)
    await msg.reply('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=types.ReplyKeyboardRemove())

async def settings(msg: Message, state: FSMContext):
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è')
    await User.page.set()
    await User.next()  


async def fio(msg: types.Message, state: FSMContext):
    logger.info(User.page)
    async with state.proxy() as data:
        data['fio'] =msg.text
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –ì–æ—Ä–æ–¥')
    await User.next()  

async def city(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] =msg.text
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç')
    User.next()
    await User.next()  

async def age(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['age'] =msg.text
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –ù–∏–∫ –¥–ª—è –º–∞—Ñ–∏–∏')
    await User.next()  

async def nick(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['mf_nn'] =msg.text
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –í–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é')
    await User.next()  

async def prof(msg: Message, state: FSMContext):
    async with state.proxy() as data:
        data['proof'] =msg.text
    await msg.answer('–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –æ—Ç ')
    await User.next()  

async def dohod(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['dohod'] =msg.text
    markup_request = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è', request_contact=True))
    await msg.answer('–í–í–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',reply_markup=markup_request)
    await User.next()  

async def ph_num(msg:Message, state: FSMContext):
    if msg.content_type=='contact':
        ph_num=msg.contact.phone_number
    else:
        ph_num=msg.text
    async with state.proxy() as data:
        data['ph_num'] =ph_num    # lo
    
    inline_btn_1 = InlineKeyboardButton("üñå–ò–∑–º–µ–Ω–∏—Ç—åüñå", callback_data=var_games.new(action='edit',id=msg.from_user.id))
    inline_btn_2 = InlineKeyboardButton("‚òëÔ∏è–í—Å–µ –û–∫‚òëÔ∏è",callback_data=var_games.new(action='ok',id=msg.from_user.id,data=data))
    inline_btn_3 = InlineKeyboardButton("‚ùå–û—Ç–º–µ–Ω–∏—Ç—å‚ùå",callback_data=var_games.new(action='cancel',id=msg.from_user.id))
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1,inline_btn_2,inline_btn_3)
    await state.finish()
    await msg.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: \n–§–ò–û: "+data['fio']+"\n–ì–æ—Ä–æ–¥: "+data['city']+"\n–í–æ–∑—Ä–∞—Å—Ç: "+data['age']+"\n–ù–∏–∫–Ω–µ–π–º –¥–ª—è –º–∞—Ñ–∏–∏: "+data['mf_nn']+"\n–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: "+data['proof']+"\n–î–æ—Ö–æ–¥ –û—Ç "+data['dohod']+"\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: "+data['ph_num']+"\n\n–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞ –∏ –≤–∞—à–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø–ª–∞—Ç–∏–≤—à—É—é –¥–∞–Ω–Ω—É—é –∏–≥—Ä—É.\n \n–í—Å–µ –≤–µ—Ä–Ω–æ?" ,reply_markup=inline_kb1)

# vote_cb = cb('vote')  # vote:<action>


async def exec_cb(query: types.CallbackQuery,callback_data: typing.Dict[any,any]):
    logger.info(query)